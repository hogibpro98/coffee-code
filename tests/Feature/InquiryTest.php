<?php

use App\Models\Inquiry;
use App\Models\InquiryComment;
use App\Models\InquiryCommentFile;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Illuminate\Support\Carbon;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Str;
use Illuminate\Http\UploadedFile;

class InquiryTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::find(2);
        $this->actingAs($this->user);
    }

    public function testStoreComment()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "content" => $faker->jobTitle(),
            "inquiry_comment_files" => [
                UploadedFile::fake()->createWithContent(Str::random(5).'.jpg', '100')
            ]
        ]);
        $response->assertStatus(201);
    }

    public function testStoreCommentFailure1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/999999/comment', [
            "content" => $faker->jobTitle()
        ]);
        $response->assertStatus(404);
    }

    public function testStoreCommentFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "content" => 1,
        ]);
        $response->assertStatus(422);
    }

    public function testStoreCommentFailure3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "member_id" => 999999,
            "content" => $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreCommentFailure4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "member_id" => $faker->jobTitle(),
            "content" => $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreCommentFailure5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "content" => $faker->jobTitle(),
            "inquiry_comment_files" => [
                UploadedFile::fake()->createWithContent(Str::random(255).'.jpg', '100')
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreCommentFailure6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/inquiry/1/comment', [
            "content" => $faker->jobTitle(),
            "inquiry_comment_files" => [
                UploadedFile::fake()->createWithContent(Str::random(10).'.jpg', '100'),
                UploadedFile::fake()->createWithContent($faker->ean13().'.jpg', '100'),
                UploadedFile::fake()->createWithContent($faker->ean8().'.jpg', '100'),
                UploadedFile::fake()->createWithContent($faker->isbn13().'.jpg', '100'),
                UploadedFile::fake()->createWithContent($faker->isbn10().'.jpg', '100'),
                UploadedFile::fake()->createWithContent($faker->currencyCode().'.jpg', '100')
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testIndex1()
    {
        $response = $this->get('/api/v1/inquiry?title=意見の件名&&content=意見の本文がここ&&status[]=3&&member_name=田');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get('/api/v1/inquiry?title=意見の件名');
        $response->assertStatus(200);
    }

    public function testIndex3()
    {
        $response = $this->get('/api/v1/inquiry?content=意見の本文がここ');
        $response->assertStatus(200);
    }

    public function testIndex4()
    {
        $response = $this->get('/api/v1/inquiry?status[]=3');
        $response->assertStatus(200);
    }

    public function testIndex5()
    {
        $response = $this->get('/api/v1/inquiry?member_name=田');
        $response->assertStatus(200);
    }

    public function testShow()
    {
        $response = $this->get('/api/v1/inquiry/1');
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/inquiry/999999');
        $response->assertStatus(404);
    }

    public function testUpdateRestart()
    {
        Inquiry::find(1)->fill(['status' => 4])->save();
        $response = $this->put('/api/v1/inquiry/1/status/restart');
        $response->assertStatus(200);
    }
    
    public function testUpdateRestartFailure1()
    {
        $response = $this->put('/api/v1/inquiry/999999/status/restart');
        $response->assertStatus(404);
    }

    public function testUpdateRestartFailure2()
    {
        Inquiry::find(1)->fill(['status' => 1])->save();
        $response = $this->put('/api/v1/inquiry/1/status/restart');
        $response->assertStatus(400);
    }

    public function testUpdateStart()
    {
        Inquiry::find(1)->fill(['status' => 1])->save();
        $response = $this->post('/api/v1/inquiry/1/status/start');
        $response->assertStatus(200);
    }
    
    public function testUpdateStartFailure1()
    {
        $response = $this->post('/api/v1/inquiry/999999/status/start');
        $response->assertStatus(404);
    }

    public function testUpdateStartFailure2()
    {
        Inquiry::find(1)->fill(['status' => 3])->save();
        $response = $this->post('/api/v1/inquiry/1/status/start');
        $response->assertStatus(400);
    }

    public function testupdateSupportInEmail()
    {
        $response = $this->put('/api/v1/inquiry/1/status/support-in-email');
        $response->assertStatus(200);
    }
    
    public function testupdateSupportInEmailFailure1()
    {
        $response = $this->put('/api/v1/inquiry/999999/status/support-in-email');
        $response->assertStatus(404);
    }

    public function testupdateClose1()
    {
        Inquiry::find(1)->fill(['status' => 2])->save();
        $response = $this->post('/api/v1/inquiry/1/status/close');
        $response->assertStatus(200);
    }

    public function testupdateClose2()
    {
        Inquiry::find(1)->fill(['status' => 3])->save();
        $response = $this->post('/api/v1/inquiry/1/status/close');
        $response->assertStatus(200);
    }
    
    public function testupdateCloseFailure1()
    {
        $response = $this->post('/api/v1/inquiry/999999/status/close');
        $response->assertStatus(404);
    }

    public function testupdateCloseFailure2()
    {
        Inquiry::find(1)->fill(['status' => 1])->save();
        $response = $this->post('/api/v1/inquiry/1/status/close');
        $response->assertStatus(400);
    }

    public function testDownload()
    {
        $response = $this->get('/api/v1/inquiry/comment/file/'.InquiryCommentFile::all()->random()->id);
        $response->assertStatus(200);
    }

    public function testDownloadFailure()
    {
        $response = $this->get('/api/v1/inquiry/comment/file/999999');
        $response->assertStatus(404);
    }

    public function testDestroy()
    { 
        $response = $this->delete('/api/v1/inquiry/comment/file/'.InquiryComment::all()->random()->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure()
    {
        $response = $this->delete('/api/v1/inquiry/comment/file/999999');
        $response->assertStatus(404);
    }

}