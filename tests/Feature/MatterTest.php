<?php

namespace Tests\Feature;

use App\Models\Client;
use App\Models\Matter;
use App\Models\MatterApplication;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Str;
use Tests\TestCase;
use Illuminate\Support\Carbon;

class MatterTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function getClient()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Client([
            "industry_type_id" => $faker->numberBetween(1, 26),
            "client_name_fullwidth" => $faker->jobTitle(),
            "client_name_katakana" => $faker->jobTitle(),
            "client_name_english" => $faker->jobTitle(),
            "postal_code" => $faker->text(8),
            "prefecture" => 0,
            "address1" => $faker->jobTitle(),
            "address2" => $faker->jobTitle(),
            "note" => $faker->jobTitle()
        ]);
        $model->save();

        return $model;
    }

    protected function getMatter()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Matter([
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $model->save();
        return $model;
    }

    public function testStore1()
    {

        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 1,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);

        $response->assertStatus(201);
    }

    public function testStore2()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::tomorrow()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(201);
    }

    public function testStore3()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::yesterday()->format('Y-m-d'),
            "application_end_date" => Carbon::now()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(201);
    }

    public function testStore4()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::yesterday()->format('Y-m-d'),
            "application_end_date" => Carbon::tomorrow()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(201);
    }

    public function testStoreFailure1()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(1, 2),
            "client_id" => 9999999,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure2()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(1, 2),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 123
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure3()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(1, 2),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 999
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure4()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->text(),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(0, 1),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure5()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => Str::random(256),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(0, 1),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->text,
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure6()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->numberBetween(1, 26),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(0, 1),
            "client_id" => $client->id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testStoreFailure7()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/matter', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "publication_range" => $faker->numberBetween(0, 1),
            "client_id" => 'abc',
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testUpdate1()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 1,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $model->client_id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testUpdate2()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d'),
            "application_end_date" => Carbon::tomorrow()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $model->client_id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => 1,
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testUpdate3()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d'),
            "application_end_date" => Carbon::tomorrow()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $model->client_id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => 1,
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testUpdate4()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => 0,
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::yesterday()->format('Y-m-d'),
            "application_end_date" => Carbon::tomorrow()->format('Y-m-d'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $model->client_id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => 1,
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testUpdateFailure1()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => Str::random(256),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure2()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 123
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure3()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 999
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure4()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->text(),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure5()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 'abc',
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->text,
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure6()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->numberBetween(1, 26),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => $model->client_id,
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }
    public function testUpdateFailure7()
    {
        $model =  $this->getMatter();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/' . $model->id, [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => $faker->numberBetween(1, 26),
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->text(200),
            "application_start_date" => $faker->date($format = 'Y-m-d', $max = 'now'),
            "application_end_date" => $faker->date($format = 'Y-m-d'),
            "client_id" => 'abc',
            "order_date" => $faker->date($format = 'Y-m-d'),
            "project_name" => "abc xyz",
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "status" => $faker->numberBetween(0, 1),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure8()
    {
        $client = $this->getClient();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/matter/999', [
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $response->assertStatus(404);
    }

    public function testDestroy()
    {
        $model =  $this->getMatter();
        $response = $this->delete('/api/v1/matter/' . $model->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure()
    {
        $response = $this->delete('/api/v1/matter/999999');
        $response->assertStatus(404);
    }

    public function testDestroyFailure2()
    {
        $matter = $this->getMatter();
        $model = new MatterApplication([
           'member_id' => 1,
           'matter_id' => $matter->id,
           'status' => 1,
           'matter_application_date' =>  Carbon::now()->format('Y-m-d H:i:s'),
        ]);
        $model->save();
        $response = $this->delete('/api/v1/matter/'. $matter->id);
        $response->assertStatus(422);
    }

    public function testIndex()
    {
        $response = $this->get('/api/v1/matter');
        $response->assertStatus(200);
    }

    public function testIndex1()
    {
        $response = $this->get('/api/v1/matter?subject=abc&project_name=abcxyz&client_id=1&user_id=1&member_id=1&matter_status=1&contract_status=1&free_text=a&publication_range=1');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get('/api/v1/matter?subject=abc');
        $response->assertStatus(200);
    }

    public function testIndex3()
    {
        $response = $this->get('/api/v1/matter?project_name=abcxyz');
        $response->assertStatus(200);
    }

    public function testIndex4()
    {
        $response = $this->get('/api/v1/matter?client_id=1');
        $response->assertStatus(200);
    }

    public function testIndex5()
    {
        $response = $this->get('/api/v1/matter?user_id=1&member_id=1');
        $response->assertStatus(200);
    }

    public function testIndex6()
    {
        $response = $this->get('/api/v1/matter?free_text=a');
        $response->assertStatus(200);
    }

    public function testIndex7()
    {
        $response = $this->get('/api/v1/matter?matter_status=1&contract_status=1&status[]=1');
        $response->assertStatus(200);
    }

    public function testIndex8()
    {
        $response = $this->get('/api/v1/matter?publication_range=1');
        $response->assertStatus(200);
    }

    public function testIndex9()
    {
        $response = $this->get('/api/v1/matter?matter_status=1');
        $response->assertStatus(200);
    }

    public function testIndex10()
    {
        $response = $this->get('/api/v1/matter?contract_status=1&status[]=1');
        $response->assertStatus(200);
    }

    public function testIndex11()
    {
        $response = $this->get('/api/v1/matter?status[]=1');
        $response->assertStatus(200);
    }

    public function testShow()
    {
        $model =  $this->getMatter();
        $response = $this->get('/api/v1/matter/' . $model->id);
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/matter/999999');
        $response->assertStatus(404);
    }

    public function testAssignUser()
    {
        $response = $this->post('api/v1/matter/3/assign-user/1');
        $response->assertStatus(201);
    }

    public function testAssignUserFailure()
    {
        $response = $this->post('api/v1/matter/999999/assign-user/1');
        $response->assertStatus(404);
    }

    public function testAssignMember()
    {
        $model = new MatterApplication([
            'member_id' => 1,
            'matter_id' => 3,
            'status' => 1,
            'automatic_email_send_time' => Carbon::tomorrow(),
            'matter_application_date' => Carbon::tomorrow(),
        ]);
        $model->save();
        $response = $this->post('api/v1/matter/3/assign-member/1');
        $response->assertStatus(200);
    }

    public function testAssignMemberFailure()
    {
        $response = $this->post('api/v1/matter/9999999/assign-member/1');
        $response->assertStatus(404);
    }

    public function testShowByUser()
    {
        $response = $this->get('/api/v1/matter/all/user/1');
        $response->assertStatus(200);
    }

    public function testShowByClient()
    {
        $response = $this->get('/api/v1/matter/all/client/1');
        $response->assertStatus(200);
    }

    public function testAutomaticCancel()
    {
        $matterApplication = new \App\Models\MatterApplication();
        $matterApplication::create([
            "member_id" => 2,
            "matter_id" => 3,
            "status" => 1,
            "matter_application_date" => Carbon::now()->format('Y-m-d H:i:s'),
        ]);
        $response = $this->post('api/v1/matter/3/automatic-cancel', [
            "member_id" => [
                2
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testAutomaticCancelFailure2()
    {
        $response = $this->post('api/v1/matter/999999/automatic-cancel', [
            "member_id" => [
                19, 20
            ]
        ]);
        $response->assertStatus(404);
    }

    public function testManualCancel()
    {
        $matterApplication = new \App\Models\MatterApplication();
        $matterApplication::create([
            "member_id" => 2,
            "matter_id" => 3,
            "status" => 0,
            "matter_application_date" => Carbon::now()->format('Y-m-d H:i:s'),
        ]);
        $response = $this->post('api/v1/matter/3/manual-cancel', [
            "member_id" => [
                2
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testManualCancelFailure1()
    {
        $response = $this->post('api/v1/matter/999999/manual-cancel', [
            "member_id" => [
                19, 20
            ]
        ]);
        $response->assertStatus(404);
    }

    public function testManualCancelFailure2()
    {
        $response = $this->post('api/v1/matter/3/manual-cancel', [
            "member_id" => [
                19, 20
            ]
        ]);
        $response->assertStatus(404);
    }

    public function testEntryStop()
    {
        $model = $this->getMatter();
        $model->status = 1;
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/entry-stop');
        $response->assertStatus(200);
    }

    public function testEntryStopFailure()
    {
        $response = $this->post('api/v1/matter/999/entry-stop');
        $response->assertStatus(404);
    }

    public function testEntryStopFailure2()
    {
        $model = $this->getMatter();
        $model->status = 5;
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/entry-stop');
        $response->assertStatus(422);
    }

    public function testUnassignMember()
    {
        $matterMemberAssign = new \App\Models\MatterMemberAssign();
        $matterMemberAssign::create([
            "member_id" => 2,
            "matter_id" => 3,
        ]);
        $response = $this->post('api/v1/matter/3/unassign-member/2');
        $response->assertStatus(204);
    }

    public function testUnassignMemberFailure()
    {
        $response = $this->post('api/v1/matter/1/unassign-member/999');
        $response->assertStatus(404);
    }

    public function testRestart1()
    {
        $model = $this->getMatter();
        $model->status = 4;
        $model->application_start_date = Carbon::tomorrow()->format('Y-m-d');
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/restart');
        $response->assertStatus(200);
    }

    public function testRestart2()
    {
        $model = $this->getMatter();
        $model->status = 4;
        $model->application_end_date = Carbon::yesterday()->format('Y-m-d');
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/restart');
        $response->assertStatus(200);
    }

    public function testRestart3()
    {
        $model = $this->getMatter();
        $model->status = 4;
        $model->application_start_date = Carbon::yesterday()->format('Y-m-d');
        $model->application_end_date = Carbon::tomorrow()->format('Y-m-d');
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/restart');
        $response->assertStatus(200);
    }

    public function testRestartFailure1()
    {
        $response = $this->post('api/v1/matter/999/restart');
        $response->assertStatus(404);
    }

    public function testRestartFailure2()
    {
        $model = $this->getMatter();
        $model->status = 1;
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/restart');
        $response->assertStatus(422);
    }

    public function testPublic1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $client = $this->getClient();
        $model = new Matter([
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/public');
        $response->assertStatus(200);
    }

    public function testPublic2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $client = $this->getClient();
        $model = new Matter([
            "subject" => $faker->jobTitle(),
            "industry_type_id" => 1,
            "is_private" => $faker->numberBetween(0, 1),
            "overview" => $faker->text(20),
            "business_content" => $faker->jobTitle(),
            "reward" => $faker->jobTitle(),
            "period" => $faker->jobTitle(),
            "area" => $faker->jobTitle(),
            "weekly_working_days" => $faker->jobTitle(),
            "target_company" => $faker->jobTitle(),
            "sales_scale" => $faker->jobTitle(),
            "work_style" => $faker->jobTitle(),
            "application_start_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "application_end_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "qualifications" => $faker->jobTitle(),
            "publication_range" => $faker->numberBetween(1, 2),
            "introduction_company_name" => $faker->jobTitle(),
            "client_id" => $client->id,
            "order_date" => Carbon::now()->format('Y-m-d H:i:s'),
            "project_name" => $faker->jobTitle(),
            "gross_fee" => $faker->jobTitle(),
            "net_fee" => $faker->jobTitle(),
            "matter_status" => $faker->numberBetween(0, 1),
            "contract_status" => $faker->numberBetween(0, 1),
            "press_release_url" => $faker->jobTitle(),
            "note" => $faker->jobTitle(),
            "status" => $faker->numberBetween(1, 5),
            "matter_billing_code" => $faker->jobTitle(),
            "published_date" => null,
            "assign_users" => [
                1, 2, 3
            ],
            "field_types" => [
                2, 3
            ]
        ]);
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/public');
        $response->assertStatus(200);
    }

    public function testPublicFailure1()
    {
        $response = $this->post('api/v1/matter/999/public');
        $response->assertStatus(404);
    }

    public function testPublicFailure2()
    {
        $model = $this->getMatter();
        $model->subject = null;
        $model->overview = null;
        $model->reward = null;
        $model->save();
        $response = $this->post('api/v1/matter/'. $model->id. '/public');
        $response->assertStatus(422);
    }

    public function testPrivate()
    {
        $model = $this->getMatter();
        $response = $this->post('api/v1/matter/'. $model->id. '/private');
        $response->assertStatus(200);

    }

    public function testPrivateFailure1()
    {
        $response = $this->post('api/v1/matter/999/private');
        $response->assertStatus(404);

    }

    public function testPrivateFailure2()
    {
        $matter = $this->getMatter();
        $model = new MatterApplication([
           'member_id' => 1,
           'matter_id' => $matter->id,
           'status' => 1,
           'matter_application_date' =>  Carbon::now()->format('Y-m-d H:i:s'),
        ]);
        $model->save();
        $response = $this->post('api/v1/matter/'. $matter->id. '/private');
        $response->assertStatus(422);
    }
}
