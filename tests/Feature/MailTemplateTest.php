<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;

class MailTemplateTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex()
    {
        $response = $this->get(route('mail-template-type.index'), [
            'sort' => 'id',
            'order' => 'asc',
            'name' => '売'
        ]);
        $response->assertStatus(200);
    }

    public function testShow()
    {
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/m/mail-template-type/999999');
        $response->assertStatus(404);
    }

    public function testUpdate()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['name'] = '学校';
        $params['from'] = 'noreply.update@proattend.jp';
        $params['title'] = 'パスワードリセットのお知らせ update';
        $params['content'] = '{{$name}}さん

            パスワードをリセットしました。
            以下の情報でログインを行ってください。

            email:{{$email}}
            password:{{$password}}

            以下のURLからログインしてください。
            {{$url}}

            ※パスワードはログイン後に変更してください。';
        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(200);
        $this->assertTrue($response['name'] === $params['name']);
        $this->assertTrue($response['from'] === $params['from']);
        $this->assertTrue($response['title'] === $params['title']);
        $this->assertTrue($response['content'] === $params['content']);
    }

    public function testUpdateFailure1()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['type'] = 4;

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure2()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['content'] = '{$name}}さん

            パスワードをリセットしました。
            以下の情報でログインを行ってください。

            email:{{$email}}
            password:{{$password}}

            以下のURLからログインしてください。
            {{$url}}

            ※パスワードはログイン後に変更してください。';

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure3()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['content'] = '{{$name}}さん

            パスワードをリセットしました。
            以下の情報でログインを行ってください。

            email:{{{$email}}
            password:{{$password}}

            以下のURLからログインしてください。
            {{$url}}

            ※パスワードはログイン後に変更してください。';

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure4()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['content'] = '{{$name}}さん

            パスワードをリセットしました。
            以下の情報でログインを行ってください。

            email:{{{$email}}
            password:{{password}}

            以下のURLからログインしてください。
            {{$url}}

            ※パスワードはログイン後に変更してください。';

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure5()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['content'] = '{{$name}}さん

            パスワードをリセットしました。
            以下の情報でログインを行ってください。

            email:{{$email}}}
            password:{{password}}

            以下のURLからログインしてください。
            {{$url}}

            ※パスワードはログイン後に変更してください。';

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure6()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/mail-template-type/2');
        $params = json_decode($response->content(), true);
        $params['name'] = '学校';

        // 情報更新
        $response = $this->put('/api/v1/m/mail-template-type/999999', $params);
        $response->assertStatus(404);
    }
}
