<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Str;
use Tests\TestCase;
use App\Models\FieldType;
class FieldTypeTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex1()
    {
        //検索未指定
        $response = $this->get('/api/v1/m/field-type');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        //検索指定（データ有り）
        $response = $this->get('/api/v1/m/field-type?name=IPO&grouping_list=ベンチャー/IPO準備支援');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) > 0);
    }

    public function testIndex3()
    {
        //検索指定（データ有り）
        $response = $this->get('/api/v1/m/field-type?name=111&grouping_list=gl_test');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) === 0);
    }

    public function testShow()
    {
        //正常系
        $response = $this->get('/api/v1/m/field-type/1');
        $response->assertStatus(200);
    }

    public function testShowFailure404()
    {
        //分野が存在しません。
        $response = $this->get('/api/v1/m/field-type/9999');
        $response->assertStatus(404);
    }

    public function testUpdate()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/field-type/1');
        $params = json_decode($response->content(), true);

        // 情報更新
        $params['name'] = 'field name update';
        $params['grouping_list'] = [];
        $params['grouping_list'][] = 'gl_update2';
        $params['grouping_list'][] = 'gl_update1';
        $params['note'] = 'note abc';
        $response = $this->put('/api/v1/m/field-type/1', $params);
        $response->assertStatus(200);
        $this->assertTrue($response['name'] === $params['name']);
        $this->assertTrue($response['grouping_list'] === json_encode($params['grouping_list']));
        $this->assertTrue($response['note'] === $params['note']);

    }

    public function testUpdateFailure404()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/field-type/1');
        $params = json_decode($response->content(), true);
        $params['name'] = 'field name update';
        $params['grouping_list'] = [];
        $params['grouping_list'][] = 'aaaa';

        // 更新対象の分野が存在しません。
        $response = $this->put('/api/v1/m/field-type/999999', $params);
        $response->assertStatus(404);
    }

    public function testUpdateFailure422()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/field-type/1');
        $dataUpdate = json_decode($response->content(), true);

        // バリデーションエラー

        //nameは、必ず指定してください。
        //grouping listは、必ず指定してください。
        $params = $dataUpdate;
        $params['name'] = '';
        $params['grouping_list'] = [];
        $response = $this->put('/api/v1/m/field-type/1', $params);
        $response->assertStatus(422);

        //nameは、255文字以下にしてください。
        //grouping listには、有効なJSON文字列を指定してください。
        $params = $dataUpdate;
        $params['name'] = Str::random(256);
        $params['grouping_list'] = 'abc';
        $response = $this->put('/api/v1/m/field-type/1', $params);
        $response->assertStatus(422);
    }


    public function testStore()
    {
        //正常系
        $response = $this->post('/api/v1/m/field-type', [
            'name' => Str::random(255),
            'grouping_list' => ['gl_store1'],
            'note' =>'note abc'
        ]);
        $response->assertStatus(201);
    }

    public function testStoreFailure422()
    {
        //バリデーションエラー

        //nameは、必ず指定してください。
        //grouping listは、必ず指定してください。
        $response = $this->post('/api/v1/m/field-type', []);
        $response->assertStatus(422);

        //nameは、255文字以下にしてください。
        //grouping listには、有効なJSON文字列を指定してください。
        $response = $this->post('/api/v1/m/field-type', [
            'name' => Str::random(256),
            'grouping_list' => ['aaaa'],
            'note' =>'note abc'
        ]);
        $response->assertStatus(422);
    }

    public function testDestroy()
    {
        //正常系
        $ft = FieldType::orderBy('id', 'desc')->first();
        $response = $this->delete('/api/v1/m/field-type/'. $ft->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure404()
    {
        //削除対象の業種が存在しません。
        $response = $this->delete('/api/v1/m/field-type/999999');
        $response->assertStatus(404);
    }

    public function testAll()
    {
        //正常系
        $response = $this->get('/api/v1/m/field-type/all');
        $response->assertStatus(200);
    }
}
