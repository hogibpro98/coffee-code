<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use App\Models\Client;



class ClientTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex1()
    {
        $response = $this->get('/api/v1/client?client_name_fullwidth=name&&industry_type_id=10&&representative=name');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get('/api/v1/client?client_name_fullwidth=name');
        $response->assertStatus(200);
    }

    public function testIndex3()
    {
        $response = $this->get('/api/v1/client?industry_type_id=10');
        $response->assertStatus(200);
    }

    public function testIndex4()
    {
        $response = $this->get('/api/v1/client?representative=name');
        $response->assertStatus(200);
    }

    public function testStore()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);
        $response->assertStatus(201);
    }

    public function testStoreFailure1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> $faker->jobTitle(),
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 999999,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->text(1000),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> 1,
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure7()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(100),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure8()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(100),
            "prefecture"=> 1000,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure9()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(1000),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(1000),
                ]
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testShow()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);

        $item = Client::orderBy('id', 'desc')->first();
        $response = $this->get('/api/v1/client/'.$item->id);
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/client/999999');
        $response->assertStatus(404);
    }

    public function testUpdate()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);

        $item = Client::orderBy('id', 'desc')->first();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/'.$item->id, [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);
        $response->assertStatus(200);
    }

    public function testUpdateFailure1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> $faker->jobTitle(),
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 999999,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->text(1000),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> 1,
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure7()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(100),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure8()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(100),
            "prefecture"=> 1000,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure9()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/1', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(1000),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(1000),
                ]
            ]
        ]);
        $response->assertStatus(422);
    }

    public function testUpdateFailure10()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('/api/v1/client/999999', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);
        $response->assertStatus(404);
    }

    public function testDestroy()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/client', [
            "industry_type_id"=> 1,
            "client_name_fullwidth"=> $faker->jobTitle(),
            "client_name_katakana"=> $faker->jobTitle(),
            "client_name_english"=> $faker->jobTitle(),
            "postal_code"=> $faker->text(8),
            "prefecture"=> 0,
            "address1"=> $faker->jobTitle(),
            "address2"=> $faker->jobTitle(),
            "note"=> $faker->jobTitle(),
            "clientRepresentatives" => [
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ],
                [
                    "name" => $faker->jobTitle(),
                    "email" => $faker->unique()->email,
                    "tel" => $faker->text(8),
                ]
            ]
        ]);
        
        $item = Client::orderBy('id', 'asc')->first();

        $response = $this->delete('/api/v1/client/'.$item->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure1()
    {
        $response = $this->delete('/api/v1/client/99999');
        $response->assertStatus(404);
    }

    public function testDestroyFailure2()
    {
        $response = $this->delete('/api/v1/client/1');
        $response->assertStatus(404);
    }

    public function testGetAll1()
    {
        $response = $this->get('/api/v1/client/all');
        $response->assertStatus(200);
    }
}
