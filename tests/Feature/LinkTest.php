<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Str;
use Tests\TestCase;
use Illuminate\Http\UploadedFile;
class LinkTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex1()
    {
        $response = $this->get('/api/v1/link');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get('/api/v1/link?title=A協会&is_private=1&sort=id&order=asc');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) === 0);
    }

    public function testIndex3()
    {
        $response = $this->get('/api/v1/link?title=D協会&sort=id&order=asc');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) === 1);
    }

    public function testShow1()
    {
        $response = $this->get('/api/v1/link/3');
        $response->assertStatus(200);
    }

    public function testShow2()
    {
        $response = $this->get('/api/v1/link/11111');
        $response->assertStatus(404);
    }

    public function testUpdate1()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/2');
        $params = json_decode($response->content(), true);
        $params['title'] = 'B協会update';

        // 情報更新
        $response = $this->put('/api/v1/link/2', $params);
        $response->assertStatus(200);
        $this->assertTrue($response['title'] === "B協会update");
    }

    public function testUpdate2()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['title'] = 'B協会update';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/999999', $params);
        $response->assertStatus(404);
    }

    public function testUpdate3()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['is_private'] = '';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//is privateは、必ず指定してください。
    }

    public function testUpdate4()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['is_private'] = '2';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//is privateには、'true'か'false'を指定してください。
    }

    public function testUpdate5()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['title'] = '';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//titleは、必ず指定してください。
    }

    public function testUpdate6()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params['title'] = $faker->text(1000);

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//titleは、255文字以下にしてください。
    }

    public function testUpdate7()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['url'] = 'abc';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//urlは、有効なURL形式で指定してください。
    }

    public function testUpdate8()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['display_order'] = 'addd';

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//display orderには、整数を指定してください。
    }

    public function testUpdate9()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/1');
        $params = json_decode($response->content(), true);
        $params['display_order'] = -1;

        // 存在しないユーザ
        $response = $this->put('/api/v1/link/1', $params);
        $response->assertStatus(422);//display orderには、0以上の数字を指定してください。
    }

    public function testUpdate10()
    {
        // 情報取得
        $response = $this->get('/api/v1/link/2');
        $params = json_decode($response->content(), true);
        $params['title'] = 'B協会update';
        $params['image'] = UploadedFile::fake()->image(Str::random(255).'.jpg');

        // 情報更新
        $response = $this->put('/api/v1/link/2', $params);
        $response->assertStatus(422);
    }

    public function testStore1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'url' => $faker->url(),
            'display_order' => 11
        ]);

        $response->assertStatus(201);
    }

    public function testStore2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->jobTitle()
        ]);
        $response->assertStatus(201);//必須のものだけ入力し、nullableな物を全て未入力
    }

    public function testStore3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'url' => $faker->url(),
        ]);

        $response->assertStatus(422);//is_private、必ず指定してください。
    }

    public function testStore4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => 2,
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'url' => $faker->url(),
            'display_order' => 11
        ]);

        $response->assertStatus(422);//is privateには、'true'か'false'を指定してください。
    }

    public function testStore5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->text(1000),
            'content' => $faker->realText(),
            'url' => $faker->url(),
        ]);

        $response->assertStatus(422);//titleは、255文字以下にしてください。
    }

    public function testStore6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'content' => $faker->realText(),
            'url' => $faker->url(),
        ]);

        $response->assertStatus(422);//titleは、必ず指定してください。
    }

    public function testStore7()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->text(100),
            'content' => $faker->realText(),
            'url' => 'abc',
        ]);

        $response->assertStatus(422);//urlは、有効なURL形式で指定してください。
    }

    public function testStore8()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->text(100),
            'content' => $faker->realText(),
            'url' => $faker->url(),
            'display_order' => -1,
        ]);

        $response->assertStatus(422);//display orderには、0以上の数字を指定してください。
    }

    public function testStore9()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->text(100),
            'content' => $faker->realText(),
            'url' => $faker->url(),
            'display_order' => 'abc',
        ]);

        $response->assertStatus(422);//display orderには、整数を指定してください。
    }

    public function testStore10()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/link', [
            'is_private' => $faker->boolean,
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'url' => $faker->url(),
            'image' => UploadedFile::fake()->image(Str::random(255).'.jpg'),
            'display_order' => 11
        ]);
        $response->assertStatus(422);//image nameは、255文字以下にしてください。
    }
}
