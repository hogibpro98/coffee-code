<?php

namespace Tests\Feature;

use App\Models\Information;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;
use Carbon\Carbon;

class InformationTest extends TestCase
{
    
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testStoretrue1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => 'zzzzzzzz',
            'content' => 'xxxx',
            'display_start_date' => null,
            'display_end_date' => null,
            'type' => 1,
            'is_private' => 0,
        ]);
        $response->assertStatus(201);
    }
    
    public function testStoretrue2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => 'xxxxxx',
            'content' => 'aaaaaaaaaaaaaaaa',
            'display_start_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'display_end_date' => null,
            'is_private' => 0,
            'type' => 1,
        ]);


        $response->assertStatus(201);
    }

    public function testStoretrue3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => 'aaaaa',
            'content' => 'aaaa',
            'display_start_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'display_end_date' => null,
            'is_private' => 0,
            'type' => 1,
        ]);

        $response->assertStatus(201);
    }

    public function testStoretrue4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => null,
            'display_end_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 2,
        ]);

        $response->assertStatus(201);
    }

    public function testStoretrue5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->subDays(2)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 1,
        ]);

        $response->assertStatus(201);
    }

    public function testStoretrue6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->subDays(2)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 1,
            'type' => 1,
        ]);

        $response->assertStatus(201);
    }
  

    public function testStoreFalse1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'type' => 0,
            'is_private' => 0,
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFalse2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => 0,
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFalse3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->realText(),
            'display_end_date' => $faker->date(),
            'is_private' => 0,
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFalse4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->realText(),
            'is_private' => 0,
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFalse7()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('api/v1/information', []);
        $response->assertStatus(422);
    }

    public function testUpdateFailure1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(0,1),
            'status' => $faker->numberBetween(1,3),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => '',
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 0,
        ];
        
        $response = $this->put('/api/v1/information/'. $model->id, $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,1),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->realText(),
            'content' => '',
            'display_start_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 0,
        ];
        
        $response = $this->put('/api/v1/information/'. $model->id, $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,49),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->realText(),
            'content' =>  $faker->realText(),
            'display_start_date' =>  $faker->realText(),
            'display_end_date' =>  $faker->realText(),
            'is_private' => 0,
        ];
        
        $response = $this->put('/api/v1/information/'. $model->id, $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure4()
    {
    
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->realText(),
            'content' =>  $faker->realText(),
            'display_start_date' =>  Carbon::now()->addDay(1)->format('Y-m-d'),
            'display_end_date' =>  Carbon::now()->addDay(2)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 2,
        ];
        
        $response = $this->put('/api/v1/information/9999999999999999', $params);
        $response->assertStatus(404);
    }

    public function testUpdateTrue1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => 0,
            'status' => 2,
            'type' => 2,
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'display_end_date' => null,
            'is_private' => 0,
            'type' => 2,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateTrue2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => null,
            'display_end_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 2,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateTrue3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->subDays(2)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 3,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateTrue4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 1,
            'type' => 3,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateTrue5()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => Carbon::now()->subDays(1)->format('Y-m-d'),
            'display_end_date' => Carbon::now()->addDay(1)->format('Y-m-d'),
            'is_private' => 0,
            'type' => 3,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateTrue6()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();

        $response = $this->get('/api/v1/information/'. $model->id);
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params= [
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => null,
            'display_end_date' => null,
            'is_private' => 0,
            'type' => 3,
        ];

        $response = $this->put('/api/v1/information/'.$model->id, $params);
        $response->assertStatus(200);
    }
    public function testDestroy()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();
        $response = $this->delete('/api/v1/information/'. $model->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure()
    {
        $response = $this->delete('/api/v1/information/888888');
        $response->assertStatus(404);
    }

    public function testshow1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $model = new Information([
            'title' => $faker->jobTitle(),
            'content' => $faker->realText(),
            'display_start_date' => $faker->date(),
            'display_end_date' => $faker->date(),
            'is_private' => $faker->numberBetween(1,9),
            'status' => $faker->numberBetween(1,4),
            'type' => $faker->numberBetween(1,3),
        ]);
        $model->save();
        $response = $this->get("api/v1/information/". $model->id);
        $response->assertStatus(200);
    }

    public function testshow2()
    {
        $response = $this->get("api/v1/information/77777");
        $response->assertStatus(404);
    }

    public function testIndex1()
    {
        $response = $this->get("api/v1/information");
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get(route('information.index', [
            'title' => 'お知',
            'content' => 'お知',
            'status' => '1',
        ]));

        $response->assertStatus(200);
    }

    
}
