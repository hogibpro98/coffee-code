<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Str;
use Tests\TestCase;
use Illuminate\Http\UploadedFile;

class FormatTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex1()
    {
        $response = $this->get(route('format.index'), [
            'sort' => 'id',
            'order' => 'asc'
        ]);
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get(route('format.index'), [
            'is_private' => 0,
            'title' => 'o',
            'sort' => 'id',
            'order' => 'asc',
            'is_include_deleted' => 'true',
        ]);
        $response->assertStatus(200);
    }

    public function testShow()
    {
        $response = $this->get('/api/v1/m/format/2');
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/m/format/999999');
        $response->assertStatus(404);
    }

    public function testUpdate1()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/format/2');
        $params = json_decode($response->content(), true);
        $params['title'] = '天気';

        // 情報更新
        $response = $this->put('/api/v1/m/format/2', $params);
        $response->assertStatus(200);
        $this->assertTrue($response['title'] === "天気");
    }

    public function testUpdate2()
    {
        // 情報取得
        $faker = \Faker\Factory::create('ja_JP');
        $params = [
            'is_private' => $faker->boolean(),
            'title' => '天気',
            'content' => '天気',
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(5).'.jpg', '100'),
        ];
        // 情報更新
        $response = $this->put('/api/v1/m/format/2', $params);
        $response->assertStatus(200);
    }

    public function testUpdate3()
    {
        // 情報取得
        $faker = \Faker\Factory::create('ja_JP');
        $params = [
            'is_private' => $faker->boolean(),
            'title' => '天気',
            'content' => '天気',
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(5).'.jpg', '100'),
            "format_tags" => [
                [
                    "id" => 1,
                    "format_id" => 1,
                    "name" => "説明",
                ],
            ]
            ];
        // 情報更新
        $response = $this->put('/api/v1/m/format/1', $params);
        $response->assertStatus(200);
    }
//
    public function testUpdateFailure1()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/format/2');
        $params = json_decode($response->content(), true);
        $faker = \Faker\Factory::create('ja_JP');
        $params['title'] = $faker->text(500);

        // 情報更新
        $response = $this->put('/api/v1/m/format/2', $params);
        $response->assertStatus(422);
    }
////
    public function testUpdateFailure2()
    {
        // 情報取得
        $response = $this->get('/api/v1/m/format/2');
        $params = json_decode($response->content(), true);

        // 存在しないユーザ
        $response = $this->put('/api/v1/m/format/999999', $params);
        $response->assertStatus(404);
    }

    public function testUpdateFailure3()
    {
        // 情報取得
        $faker = \Faker\Factory::create('ja_JP');
        $params = [
            'is_private' => $faker->boolean(),
            'title' => '天気',
            'content' => '天気',
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(255).'.jpg', '100'),
        ];
        // 情報更新
        $response = $this->put('/api/v1/m/format/2', $params);
        $response->assertStatus(422);
    }

    public function testDestroy()
    {
        $response = $this->delete('/api/v1/m/format/3');
        $response->assertStatus(204);
    }
//
    public function testDestroyFailure()
    {
        $response = $this->delete('/api/v1/m/format/999999');
        $response->assertStatus(404);
    }

    public function testStore()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'title' => $faker->jobTitle(),
            'content' => $faker->jobTitle(),
            'is_private' => $faker->boolean(),
        ]);
        $response->assertStatus(201);
    }
//
    public function testStore1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'title' => $faker->jobTitle(),
            'content' => $faker->jobTitle(),
            'is_private' => $faker->boolean(),
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(5).'.jpg', '100'),
        ]);
        $response->assertStatus(201);
    }

    public function testStore2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'title' => $faker->jobTitle(),
            'content' => $faker->jobTitle(),
            'is_private' => $faker->boolean(),
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(5).'.jpg', '100'),
            "format_tags" => [
                [
                    "name" => "説明",
                ],
            ]
        ]);
        $response->assertStatus(201);
    }
//
    public function testStoreFailure1()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'title' => $faker->text(500),
            'file_name' => $faker->domainName(),
            'file_path' => $faker->url(),
            'content' => $faker->jobTitle(),
            'is_private' => $faker->boolean(),
            'mime_type' => $faker->mimeType(),
        ]);
        $response->assertStatus(422);
    }
//
    public function testStoreFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'is_private' => $faker->boolean(),
        ]);
        $response->assertStatus(422);
    }

    public function testStoreFailure3()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->post('/api/v1/m/format', [
            'title' => $faker->jobTitle(),
            'is_private' => $faker->boolean(),
            'file' =>  UploadedFile::fake()->createWithContent(Str::random(255).'.jpg', '100'),
        ]);
        $response->assertStatus(422);
    }

    public function testDownloadFailure()
    {
        $response = $this->get('/api/v1/m/format/999999/download');
        $response->assertStatus(404);
    }

    public function testDownload()
    {
        $response = $this->get('/api/v1/m/format/2/download');
        $response->assertStatus(200);
    }
}
