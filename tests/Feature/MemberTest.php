<?php

namespace Tests\Feature;

use App\Models\Member;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;
use App\Models\WorkingStatus;
use Illuminate\Support\Facades\DB;

class MemberTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    private function getMember()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $mode = Member::all()->random();
        $mode->memberOwnedQualifications()->create([
            'member_id'=> $mode->id,
            'owned_qualification' => $faker->numberBetween($min = 1, $max = 3),
            'other_qualification'=> '公認'
        ]);
        $mode->memberCareerHistories()->create([
            'member_id'=> $mode->id,
            'find_work' => $faker->date($format = 'Y-m-d'),
            'office_name'=> '公認',
            'status'=> 1,
        ]);
        $mode->memberEducationHistories()->create([
            'member_id'=> $mode->id,
            'admission' => $faker->date($format = 'Y-m-d'),
            'graduation'=> $faker->date($format = 'Y-m-d'),
            'school_name'=> '公認',
        ]);
        $mode->workingStatuses()->create([
            'member_id' => $mode->id,
            'start_date' => $faker->date($format = 'Y-m-d'),
        ]);
        DB::table('field_member')->insert(
            [
                'member_id' => $mode->id,
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ]
        );
        return $mode;
    }

    public function testIndex1()
    {
        $member = $this->getMember();
        $response = $this->get('/api/v1/member?name=井村友美&email=' . $member->email . '&member_number=' . $member->id . '&is_partner=0&office_name=株式会社XXX&field_type=資金調達支援');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $member = $this->getMember();
        $response = $this->get('/api/v1/member?name=喜嶋');
        $response->assertStatus(200);
    }

    public function testIndex3()
    {
        $response = $this->get('/api/v1/member?name=キジマトモミ');
        $response->assertStatus(200);
    }

    public function testIndex8()
    {
        $response = $this->get('/api/v1/member?field_type=資金調達支援');
        $response->assertStatus(200);
    }

    public function testIndex4()
    {
        $response = $this->get('/api/v1/member?is_leave=true');
        $response->assertStatus(200);
    }

    public function testIndex5()
    {
        $response = $this->get('/api/v1/member');
        $params = json_decode($response->content(), true);
        $this->assertArrayNotHasKey('password', $params['data'][0]);
    }

    public function testIndex6()
    {
        $response = $this->get('/api/v1/member');
        $params = json_decode($response->content(), true);

        $this->assertArrayNotHasKey('remember_token', $params['data'][0]);
    }

    public function testIndex7()
    {
        $response = $this->get('/api/v1/member');
        $params = json_decode($response->content(), true);

        $this->assertArrayNotHasKey('email_verified_at', $params['data'][0]);
    }

    public function testIndex9()
    {
        $response = $this->get('/api/v1/member?owned_qualification=士');
        $response->assertStatus(200);
    }

    public function testGetAll()
    {
        $response = $this->get('/api/v1/member/all');
        $response->assertStatus(200);
    }

    public function testShow()
    {
        $response = $this->get('/api/v1/member/2');
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('/api/v1/member/999999');
        $response->assertStatus(404);
    }
    public function testShow1()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);

        $this->assertArrayNotHasKey('password', $params);
    }

    public function testShow2()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);

        $this->assertArrayNotHasKey('remember_token', $params);
    }

    public function testShow3()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);

        $this->assertArrayNotHasKey('email_verified_at', $params);
    }

    public function testGetOperatingStatus()
    {
        $workingStatuses = new WorkingStatus([
                'member_id' => 4,
                'start_date' => '2021-02-01',
                'rate' => 0
        ]);
        $workingStatuses->save();
        $response = $this->get('/api/v1/member/4/operating_status?date=1990-02-01');
        $response->assertStatus(200);
    }

    public function testGetOperatingStatusFailure1()
    {
        $response = $this->get('/api/v1/member/999999/operating_status');
        $response->assertStatus(404);
    }

    public function testGetOperatingStatusFailure2()
    {
        $response = $this->get('/api/v1/member/4/operating_status');
        $response->assertStatus(404);
    }

    public function testLeave()
    {
        $response = $this->post('/api/v1/member/5/leave');
        $response->assertStatus(200);
    }

    public function testLeaveFailure1()
    {
        $response = $this->post('/api/v1/member/999999/leave');
        $response->assertStatus(404);
    }

    public function testLeaveFailure2()
    {
        $response = $this->post('/api/v1/member/5/leave');
        $response->assertStatus(400);
    }

    public function testRestore()
    {
        $response = $this->post('/api/v1/member/5/restore');
        $response->assertStatus(200);
    }

    public function testRestoreFailure1()
    {
        $response = $this->post('/api/v1/member/999999/restore');
        $response->assertStatus(404);
    }

    public function testRestoreFailure2()
    {
        $response = $this->post('/api/v1/member/5/restore');
        $response->assertStatus(400);
    }

    public function testGetResume()
    {
        $response = $this->get('/api/v1/member/2/resume');
        $response->assertStatus(200);
    }

    public function testGetResumeFailure()
    {
        $response = $this->get('/api/v1/member/999999/resume');
        $response->assertStatus(404);
    }

    public function testUpdate1()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['name_kanji'] = '喜嶋 知実';
        $params['name_furigana'] = "喜嶋 知実";
        $params['office_name'] = "株式会社XXX";
        $params['tel1'] = "00923831";
        $params['tel2'] = "00923832";
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $params['member_owned_qualifications'] =[];
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];

        $response = $this->put('/api/v1/member/' . $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate2()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['name_kanji'] = '喜嶋 知実';
        $params['name_furigana'] = "喜嶋 知実";
        $params['office_name'] = "株式会社XXX";
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        unset($params['certified_accountant_number']);

        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate3()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['name_kanji'] =  "喜嶋 知実";
        $params['name_furigana'] = "ｷｼﾞﾏﾄﾓ";
        $params['email'] = "ワタナベ.mikako@example.net";
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);

        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate6()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['member_education_histories'] = [
            [
                "admission" => "1976-10-08",
                "graduation" => "1973-07-03",
                "school_name" => "佐藤XXX大学"
            ]
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate7()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['advisory_experience_years'] = 4;
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate8()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['experience'] = $params['experience'] . '__';
        $params['advisory_experience_years'] = 3;
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate9()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['name_kanji'] = '喜嶋 知実';
        $params['name_furigana'] = "喜嶋 知実";
        $params['office_name'] = "株式会社XXX";
        $params['tel1'] = "00923831";
        $params['tel2'] = "00923832";
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ]
        ];

        $response = $this->put('/api/v1/member/' . $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate10()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['certified_accountant_number'] = '2222';
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 1,
                'other_qualification' => null,
            ]
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate11()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['us_certified_accountant_number'] = '2222';
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 2,
                'other_qualification' => null,
            ]
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdate12()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['tax_accountant_number'] = '22222';
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 3,
                'other_qualification' => null,
            ]
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $response = $this->put('/api/v1/member/'. $member->id, $params);
        $response->assertStatus(200);
    }

    public function testUpdateFailure1()
    {
        $params = [
            "name_furigana" => "ｷｼﾞﾏﾄﾓ",
            "email" => "ワタナベ.mikako@example.net",
            "birthdate" => "2019-05-21",
            "office_name" => "株式会社XXX",
            "postal_code" => "1001000",
            "prefecture" => 1,
            "address1" => "AAA市",
            "address2" => "BBB町",
            "tel1" => "0",
            "tel2" => "0",
            "tel3" => "0",
            "advisory_experience_years" => 1,
            "experience" => "あああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああああ",
            "is_partner" => 0,
            "is_release_working_status" => 1,
        ];

        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure2()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['name_kanji'] = $faker->text(500);

        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure3()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['email'] = "example.net";

        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure4()
    {
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['member_career_histories'][0]['office_name'] = $faker->realText(256);

        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure11()
    {
        $member = $this->getMember();
        $member->memberOwnedQualifications()->delete();
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->get('/api/v1/member/' . $member->id);
        $params = json_decode($response->content(), true);
        $params['field_types'] = [
            [
                'field_id' => 1,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
            [
                'field_id' => 2,
                'type' => $faker->numberBetween($min = 1, $max = 5)
            ],
        ];
        $params['advisory_experience_years'] =$faker->numberBetween($min = 1, $max = 5);
        $response = $this->put('/api/v1/member/999999', $params);
        $response->assertStatus(404);
    }

    public function testUpdateFailure15()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['certified_accountant_number'] = null;
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 1,
                'other_qualification' => null,
            ]
        ];
        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure16()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['us_certified_accountant_number'] = null;
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 2,
                'other_qualification' => null,
            ]
        ];
        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }

    public function testUpdateFailure17()
    {
        $response = $this->get('/api/v1/member/2');
        $params = json_decode($response->content(), true);
        $params['tax_accountant_number'] = null;
        $params['member_owned_qualifications'] = [
            [
                'owned_qualification' => 3,
                'other_qualification' => null,
            ]
        ];
        $response = $this->put('/api/v1/member/2', $params);
        $response->assertStatus(422);
    }
}
