<?php

namespace Tests\Feature;

use App\Models\EventSeminar;
use App\Models\EventSeminarApplication;
use App\Models\EventSeminarDate;
use App\Models\Member;
use Tests\TestCase;
use Illuminate\Support\Carbon;
use Illuminate\Foundation\Testing\WithoutMiddleware;


class EventSeminarTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function getEventSeminar ($isEventSeminarDate, $status, $date = 2)
    {
        $application_start_date = date('Y-m-d', strtotime('-5 days'));
        $application_end_date = date('Y-m-d', strtotime('+5 days'));
        if ($date === 1) $application_start_date = date('Y-m-d', strtotime('+5 days'));
        if ($date === 3) $application_end_date = date('Y-m-d', strtotime('-5 days'));
        $faker = \Faker\Factory::create('ja_JP');
        $model = new EventSeminar([
            'title' => $faker->jobTitle(),
            'type' => $faker->numberBetween(1, 2),
            'is_private' => $faker->numberBetween(0, 1),
            'content' => $faker->jobTitle(),
            'application_start_date' => $application_start_date,
            'application_end_date' => $application_end_date,
            'fee_type' => $faker->numberBetween(1, 2),
            'fee' => $faker->numberBetween(1, 2),
            'capacity_type' => $faker->numberBetween(1, 2),
            'holding_type' => $faker->numberBetween(1, 2),
            'holding_time_type' => $faker->numberBetween(1, 3),
            'status' => $status,
            'published_date' => $isEventSeminarDate ? $faker->date($format = 'Y-m-d') : null,
            'cpe_registration' => $faker->jobTitle(),
            'organizer' => $faker->jobTitle(),
            'times_infomation' => json_encode(["times" => 6,"times_title" => "Prof.","times_content" => "Mr."]),
        ]);
        $model->save();
        if ($isEventSeminarDate) {
            $model->eventSeminarDates()->create([
                'event_seminar_id' => $model->id,
                'times' => 1,
                'start_time' => $faker->date($format = 'Y-m-d'),
                'end_time' => $faker->date($format = 'Y-m-d'),
                'remarks_for_mail' => $faker->email()
            ]);
            $d = EventSeminarDate::orderBy('id', 'desc')->first();
            EventSeminarApplication::insert([
                'member_id' => 1,
                'event_seminar_date_id' => $d->id,
                'is_canceled' => 1,
                'remarks' => ""
            ]);

            if($date !== 4) $this->getEventSeminarApplication($model->eventSeminarDates()->first()->id);
        }

        return $model;
    }

   protected function getEventSeminarApplication($idEventSeminarDate)
   {
       $memberId = Member::first()->id;
       $eventSeminarDate = new EventSeminarApplication([
           'member_id' => $memberId,
           'event_seminar_date_id' => $idEventSeminarDate
       ]);
       $eventSeminarDate->save();
   }

   public function testStore()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $dataStore = [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ];
       $response = $this->post('api/v1/event-seminar', $dataStore);
       $response->assertStatus(201);
   }

   public function testStoreFailure1()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => 1,
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure2()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure3()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->jobTitle(),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure4()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => 1111,
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure5()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => 8,
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure6()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => 8,
           'is_private' => $faker->numberBetween(0, 1),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure7()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => 8,
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure8()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(1, 2),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => 8,
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure9()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(1, 2),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->jobTitle(),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure10()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(1, 2),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => 8,
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure11()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(1, 2),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => 8,
           'holding_time_type' => $faker->numberBetween(1, 3),
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testStoreFailure12()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar', [
           'title' => $faker->jobTitle(),
           'type' => $faker->numberBetween(1, 2),
           'is_private' => $faker->numberBetween(1, 2),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
           'fee_type' => $faker->numberBetween(1, 2),
           'fee' => $faker->numberBetween(1, 2),
           'capacity_type' => $faker->numberBetween(1, 2),
           'holding_type' => $faker->numberBetween(1, 2),
           'holding_time_type' => 8,
           'status' => $faker->numberBetween(1, 6),
           'published_date' => $faker->date($format = 'Y-m-d'),
           'cpe_registration' => $faker->jobTitle(),
           'organizer' => $faker->jobTitle(),
           'times_infomation' => $faker->jobTitle(),
       ]);
       $response->assertStatus(422);
   }

   public function testUpdate()
   {
       $eventSeminar = $this->getEventSeminar(true, 3);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id, [
           'title' => $faker->jobTitle(),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(200);
   }

   public function testUpdateFailure1()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/999999', [
           'title' => $faker->jobTitle(),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(404);
   }

   public function testUpdateFailure2()
   {
       $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id, [
           'title' => 1111,
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(422);
   }

   public function testUpdateFailure3()
   {
       $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id, [
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->date($format = 'Y-m-d'),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(422);
   }

   public function testUpdateFailure4()
   {
       $eventSeminar = $this->getEventSeminar(true, 3);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id, [
           'title' => $faker->jobTitle(),
           'content' => $faker->jobTitle(),
           'application_start_date' => $faker->jobTitle(),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(422);
   }

   public function testUpdateFailure5()
   {
       $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id, [
           'title' => $faker->jobTitle(),
           'content' => $faker->jobTitle(),
           'application_end_date' => $faker->date($format = 'Y-m-d'),
       ]);
       $response->assertStatus(422);
   }

   public function testCancel()
   {
       $eventSeminar = $this->getEventSeminar(true,3);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/cancel', [
           'member_id' => 1,
           'cancel_type' => 1,
       ]);
       $response->assertStatus(200);
   }

   public function testCancelFailure1()
   {
       $response = $this->post('api/v1/event-seminar/999999/cancel', [
           'member_id' => 1,
           'cancel_type' => 0,
       ]);
       $response->assertStatus(404);
   }

   public function testPublic()
   {
       $eventSeminar = $this->getEventSeminar(true, 1);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/public');
       $response->assertStatus(200);
   }

   public function testPublicFailure1()
   {
       $response = $this->post('api/v1/event-seminar/999999/public');
       $response->assertStatus(404);
   }

   public function testPublicFailure2()
   {
       $eventSeminar = $this->getEventSeminar(false, 1);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/public');
       $response->assertStatus(422);
   }


    public function testPrivate()
    {
        $eventSeminar = $this->getEventSeminar(true, 5);
        $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/private');
        $response->assertStatus(200);
    }

    public function testPrivateFailure1()
    {
        $response = $this->post('api/v1/event-seminar/999999/private');
        $response->assertStatus(404);
    }

   public function testEntryStop()
   {
       $eventSeminar = $this->getEventSeminar(true, 3);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/entry-stop');
       $response->assertStatus(200);
   }

   public function testEntryStopFailure1()
   {
       $response = $this->post('api/v1/event-seminar/999999/entry-stop');
       $response->assertStatus(404);
   }

   public function testEntryStopFailure2()
   {
       $eventSeminar = $this->getEventSeminar(false, 5);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/entry-stop');
       $response->assertStatus(422);
   }

   public function testEntryStopFailure3()
   {
       $eventSeminar = $this->getEventSeminar(false, 6);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/entry-stop');
       $response->assertStatus(422);
   }

   public function testEntryStopFailure4()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/entry-stop');
       $response->assertStatus(422);
   }

   public function testRestart1()
   {
       $eventSeminar = $this->getEventSeminar(true, 4, 1);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/restart');
       $response->assertStatus(200);
   }

   public function testRestart2()
   {
       $eventSeminar = $this->getEventSeminar(true, 4);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/restart');
       $response->assertStatus(200);
   }

   public function testRestart3()
   {
       $eventSeminar = $this->getEventSeminar(true, 4, 3);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/restart');
       $response->assertStatus(200);
   }

   public function testRestartFailure1()
   {
       $response = $this->post('api/v1/event-seminar/999999/restart');
       $response->assertStatus(404);
   }

   public function testRestartFailure2()
   {
       $eventSeminar = $this->getEventSeminar(false, 5);
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/restart');
       $response->assertStatus(422);
   }

   public function testPiece()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'times' => $faker->numberBetween(1, 2),
           'start_time' => $faker->date($format = 'Y-m-d'),
           'end_time' => $faker->date($format = 'Y-m-d'),
           'postal_code' => $faker->postcode(),
           'prefecture' => $faker->numberBetween(1, 90),
           'address1' => $faker->address(),
           'address2' => $faker->address(),
           'capacity' => $faker->numberBetween(1, 90),
           'zoom_url' => $faker->url(),
           'zoom_meeting_id' => $faker->jobTitle(),
           'zoom_password' =>  $faker->password(),
           'archive_url' =>  $faker->url(),
           'zoom_org_data' => $faker->jobTitle(),
           'remarks_for_manager' => $faker->jobTitle(),
           'remarks_for_mail' => $faker->jobTitle(),
       ]);
       $response->assertStatus(201);
   }

   public function testPieceFailure1()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/999999/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'times' => $faker->numberBetween(1, 2),
           'start_time' => $faker->date($format = 'Y-m-d'),
           'end_time' => $faker->date($format = 'Y-m-d'),
           'remarks_for_mail' => $faker->email()
       ]);
       $response->assertStatus(404);
   }

   public function testPieceFailure2()
   {
       $eventSeminar = $this->getEventSeminar(true, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'times' => $faker->numberBetween(1, 2),
           'start_time' => $faker->date($format = 'Y-m-d'),
           'end_time' => $faker->date($format = 'Y-m-d'),
           'remarks_for_mail' => $faker->email()
       ]);
       $response->assertStatus(422);
   }

   public function testPieceFailure3()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'start_time' => $faker->date($format = 'Y-m-d'),
           'end_time' => $faker->date($format = 'Y-m-d'),
           'remarks_for_mail' => $faker->email(),
       ]);
       $response->assertStatus(422);
   }

   public function testPieceFailure4()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'times' => $faker->numberBetween(1, 2),
           'start_time' => 'aaaaaaaa',
           'end_time' => $faker->date($format = 'Y-m-d'),
           'remarks_for_mail' => $faker->email(),
       ]);
       $response->assertStatus(422);
   }

   public function testPieceFailure5()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece', [
           'event_seminar_id' => $eventSeminar->id,
           'times' => $faker->numberBetween(1, 2),
           'start_time' => $faker->date($format = 'Y-m-d'),
           'end_time' => $faker->date($format = 'Y-m-d'),
           'remarks_for_mail' => 111111,
       ]);
       $response->assertStatus(422);
   }

   public function testUpdatePiece()
   {
       $eventSeminar = $this->getEventSeminar(true, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece/'. $eventSeminar->eventSeminarDates[0]->id, [
           'id' => $eventSeminar->eventSeminarDates[0]->id,
           'postal_code' => $faker->postcode(),
           'prefecture' => $faker->numberBetween(1, 90),
           'address1' => $faker->address(),
           'address2' => $faker->address(),
           'archive_url' =>  $faker->url()
       ]);
       $response->assertStatus(201);
   }

   public function testUpdatePieceFailure1()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/999999/piece/1', [
            'id' => 1,
           'postal_code' => $faker->postcode(),
           'prefecture' => $faker->numberBetween(1, 90),
           'address1' => $faker->address(),
           'address2' => $faker->address(),
           'archive_url' =>  $faker->url()
       ]);
       $response->assertStatus(404);
   }

   public function testUpdatePieceFailure2()
   {
       $eventSeminar = $this->getEventSeminar(false, 4);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/piece/1', [
            'id' => 1,
           'postal_code' => $faker->postcode(),
           'prefecture' => $faker->numberBetween(1, 90),
           'address1' => $faker->address(),
           'address2' => $faker->address(),
           'archive_url' =>  $faker->url()
       ]);
       $response->assertStatus(404);
   }

   public function testRegisterTimes()
   {
       $eventSeminar = $this->getEventSeminar(false, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/times', [
            'times' => $faker->numberBetween(1,5),
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(201);
   }

   public function testRegisterTimesFailure1()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/999999/times', [
            'times' => $faker->numberBetween(1,5),
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(404);
   }

   public function testRegisterTimesFailure2()
   {
    $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/times', [
            'times' => $faker->numberBetween(1,5),
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(422);
   }

   public function testRegisterTimesFailure3()
   {
    $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/times', [
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(422);
   }

   public function testRegisterTimesFailure4()
   {
    $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/times', [
            'times' => $faker->title(),
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(422);
   }

   public function testRegisterTimesFailure5()
   {
    $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/times', [
            'times' => $faker->numberBetween(1,5),
            'times_title' =>  $faker->numberBetween(1,5),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(422);
   }

    public function testUpdateTimes()
    {
        $eventSeminar = $this->getEventSeminar(false, 1);
        $faker = \Faker\Factory::create('ja_JP');
        $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id . '/times/6', [
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
        ]);
        $response->assertStatus(200);
    }

   public function testUpdateTimesFailure1()
   {
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/999999/times/6', [
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(404);
   }

   public function testUpdateTimesFailure2()
   {
    $eventSeminar = $this->getEventSeminar(true, 1);
       $faker = \Faker\Factory::create('ja_JP');
       $response = $this->put('api/v1/event-seminar/' . $eventSeminar->id . '/times/10', [
            'times_title' => $faker->title(),
            'times_content' => $faker->title(),
       ]);
       $response->assertStatus(404);
   }

    public function testStopEvent()
    {
        $eventSeminar = $this->getEventSeminar(true, 2);
        $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/event-stop');
        $response->assertStatus(200);
    }

    public function testStopEventFailure1()
    {
        $response = $this->post('api/v1/event-seminar/999999/event-stop');
        $response->assertStatus(404);
    }

    public function testStopEventFailure2()
    {
        $eventSeminar = $this->getEventSeminar(true, 5);
        $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/event-stop');
        $response->assertStatus(422);
    }

    public function testStopEventFailure3()
    {
        $eventSeminar = $this->getEventSeminar(true, 6);
        $response = $this->post('api/v1/event-seminar/' . $eventSeminar->id . '/event-stop');
        $response->assertStatus(422);
    }

    public function testShow()
    {
        $eventSeminar = $this->getEventSeminar(true, 2);
        $response = $this->get('api/v1/event-seminar/' . $eventSeminar->id);
        $response->assertStatus(200);
    }

    public function testShowFailure()
    {
        $response = $this->get('api/v1/event-seminar/9999999');
        $response->assertStatus(404);
    }

    public function testIndex1()
    {
        $response = $this->get('api/v1/event-seminar?title=a&type[]=1&status[]=1&registration_time=1&start_time=5');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        $response = $this->get('api/v1/event-seminar?title=a');
        $response->assertStatus(200);
    }

    public function testIndex3()
    {
        $response = $this->get('api/v1/event-seminar?type[]=1');
        $response->assertStatus(200);
    }

    public function testIndex4()
    {
        $response = $this->get('api/v1/event-seminar?status[]=1');
        $response->assertStatus(200);
    }

    public function testIndex5()
    {
        $response = $this->get('api/v1/event-seminar?registration_time=1');
        $response->assertStatus(200);
    }

    public function testIndex6()
    {
        $response = $this->get('api/v1/event-seminar?start_time=5');
        $response->assertStatus(200);
    }

    public function testShowApplicationComma()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $response = $this->get('api/v1/event-seminar/' . $eventSeminar->id . '/entry-info/piece/' . $eventSeminar->eventSeminarDates[0]['id']);
        $response->assertStatus(200);
    }

    public function testShowApplicationCommatrue1()
    {
        $eventSeminar = $this->getEventSeminar(true, 2, 4);
        $response = $this->get('api/v1/event-seminar/' . $eventSeminar->id . '/entry-info/piece/' . $eventSeminar->eventSeminarDates[0]['id']);
        $response->assertStatus(200);
    }

    public function testShowApplicationCommaFailure2()
    {
        $response = $this->get('api/v1/event-seminar/999999/entry-info/piece/999999');
        $response->assertStatus(404);
    }

    public function testExportCSV()
    {
        $eventSeminar = $this->getEventSeminar(true, 2);
        $response = $this->get('api/v1/event-seminar/' . $eventSeminar->id . '/piece/' . $eventSeminar->eventSeminarDates[0]['id'] . '/csv');
        $response->assertStatus(200);
    }

    public function testExportCSVFailure1()
    {
        $response = $this->get('api/v1/event-seminar/999999/piece/999999/csv');
        $response->assertStatus(404);
    }

    public function testExportCSVTrue2()
    {
        $eventSeminar = $this->getEventSeminar(true, 2, 4);
        $response = $this->get('api/v1/event-seminar/' . $eventSeminar->id . '/piece/' . $eventSeminar->eventSeminarDates[0]['id'] . '/csv');
        $response->assertStatus(200);
    }

    public function testDestroy()
    {
        $eventSeminar = $this->getEventSeminar(false, 1);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id);
        $response->assertStatus(204);
    }

    public function testDestroyFailure1()
    {
        $response = $this->delete('api/v1/event-seminar/999999');
        $response->assertStatus(404);
    }

    public function testDestroyFailure2()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id);
        $response->assertStatus(422);
    }

    public function testDeleteComma()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $eventSeminar->update([
                'published_date' => null
            ]);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id . '/piece/' . $eventSeminar->eventSeminarDates[0]['id']);
        $response->assertStatus(204);
    }

    public function testDeleteCommaFailure1()
    {
        $response = $this->delete('api/v1/event-seminar/999999/piece/999999');
        $response->assertStatus(404);
    }

    public function testDeleteCommaFailure2()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id . '/piece/' . $eventSeminar->eventSeminarDates[0]['id']);
        $response->assertStatus(422);
    }

    public function testDeleteCommaFailure3()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $eventSeminar->update([
                'published_date' => null
            ]);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id . '/piece/999999');
        $response->assertStatus(404);
    }

    public function testDeleteTimes()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $eventSeminar->update([
                'published_date' => null
            ]);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id . '/times/1');
        $response->assertStatus(204);
    }

    public function testDeleteTimesFailure1()
    {
        $response = $this->delete('api/v1/event-seminar/999999/times/1');
        $response->assertStatus(404);
    }

    public function testDeleteTimesFailure2()
    {
        $eventSeminar = $this->getEventSeminar(true, 1);
        $response = $this->delete('api/v1/event-seminar/' . $eventSeminar->id . '/times/1');
        $response->assertStatus(422);
    }

}
