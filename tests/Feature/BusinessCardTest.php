<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Str;
use Tests\TestCase;
use App\Models\BusinessCard;

class BusinessCardTest extends TestCase
{
    use WithoutMiddleware;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testUpdate1()
    {
        // 情報更新
        $params = [
            'status' => 2,
            'delivery_postal_code' => '1001001',
            'delivery_prefecture' => 23,
            'delivery_address1' => 'AAA市 update',
            'delivery_address2' => 'BBB市 update',
            'card_name_kanji' => '喜嶋 知実 update',
            'card_name_roman' => 'Tomomi Kijima',
            'card_email' => 'watanabe_update@example.net',
            'card_office_name' => '株式会社XXXUpdate',
            'is_describe_office_name' => true,
            'card_qualification' => ['資格A','資格B','資格C（更新）'],
            'note' => '更新された備考',
            'card_image_file' => UploadedFile::fake()->image(Str::random().'.jpg'),
            'card_background_image_file' => UploadedFile::fake()->image(Str::random().'.jpg'),
        ];
        $response = $this->put('/api/v1/business-card/1', $params);
        $response->assertStatus(200);
        $this->assertTrue($response['status'] === $params['status']);
        $this->assertTrue($response['delivery_postal_code'] === $params['delivery_postal_code']);
        $this->assertTrue($response['delivery_prefecture'] === $params['delivery_prefecture']);
        $this->assertTrue($response['delivery_address1'] === $params['delivery_address1']);
        $this->assertTrue($response['delivery_address2'] === $params['delivery_address2']);
        $this->assertTrue($response['card_name_kanji'] === $params['card_name_kanji']);
        $this->assertTrue($response['card_name_roman'] === $params['card_name_roman']);
        $this->assertTrue($response['card_email'] === $params['card_email']);
        $this->assertTrue($response['card_office_name'] === $params['card_office_name']);
        $this->assertTrue($response['is_describe_office_name'] === $params['is_describe_office_name']);
        $this->assertTrue($response['card_qualification'] === $params['card_qualification']);
        $this->assertTrue($response['note'] === $params['note']);

    }
    public function testUpdate2()
    {
        // 情報取得
        $response = $this->get('/api/v1/business-card/1');
        $dataDetail = json_decode($response->content(), true);

        //member_id、card_image、card_background_imageは値を渡しても更新されない
        $params = $dataDetail;
        $params['member_id'] = '999';
        $params['card_image'] = 'path/card_image.jpg';
        $params['card_background_image'] = 'path/card_background_image.jpg';

        $response = $this->put('/api/v1/business-card/1', $params);
        $response->assertStatus(200);

        $this->assertTrue($response['member_id'] !== $params['member_id']);
        $this->assertTrue($response['card_image'] !== $params['card_image']);
        $this->assertTrue($response['card_background_image'] !== $params['card_background_image']);
        $this->assertTrue($response['member_id'] === $dataDetail['member_id']);
        $this->assertTrue($response['card_image'] === $dataDetail['card_image']);
        $this->assertTrue($response['card_background_image'] === $dataDetail['card_background_image']);
    }

    public function testUpdateFailure404()
    {
        //更新対象の名刺作成依頼が存在しません。
        $params = [
            'status' => 2,
            'delivery_postal_code' => '1001001',
            'delivery_prefecture' => 23,
            'delivery_address1' => 'AAA市 update',
            'delivery_address2' => 'BBB市 update',
            'card_name_kanji' => '喜嶋 知実 update',
            'card_name_roman' => 'Tomomi Kijima',
            'card_email' => 'watanabe_update@example.net',
            'card_office_name' => '株式会社XXXUpdate',
            'is_describe_office_name' => true,
            'card_qualification' => ['資格A','資格B','資格C（更新）'],
            'note' => '更新された備考',
            'card_image_file' => UploadedFile::fake()->image(Str::random().'.jpg'),
            'card_background_image_file' => UploadedFile::fake()->image(Str::random().'.jpg'),
        ];
        $response = $this->put('/api/v1/business-card/999', $params);
        $response->assertStatus(404);
    }

    public function testUpdateFailure422()
    {
        // バリデーションエラー

        //statusは、必ず指定してください。
        //delivery postal codeは、必ず指定してください。
        //delivery prefectureは、必ず指定してください。
        //delivery address1は、必ず指定してください。
        //delivery address2は、必ず指定してください。
        //card name kanjiは、必ず指定してください。
        //card name furiganaは、必ず指定してください。
        //card emailは、必ず指定してください。
        //card office nameは、必ず指定してください。
        //is_describe_office_nameは、必ず指定してください。
        //noteは、必ず指定してください。
        $response = $this->put('/api/v1/business-card/1', []);
        $response->assertStatus(422);

        //選択されたstatusは、有効ではありません。
        //delivery postal codeは、20文字以下にしてください。
        //delivery prefectureには、整数を指定してください。
        //delivery address1は、255文字以下にしてください。
        //delivery address2は、255文字以下にしてください。
        //card name kanjiは、100文字以下にしてください。
        //card name romanは、100文字以下にしてください。
        //card emailは、有効なメールアドレス形式で指定してください。
        //card office nameは、255文字以下にしてください。
        //card qualificationは、3件以下にしてください。
        $response = $this->put('/api/v1/business-card/1', [
            'status' => 5,
            'delivery_postal_code' => Str::random(21),
            'delivery_prefecture' => 'abc',
            'delivery_address1' => Str::random(256),
            'delivery_address2' => Str::random(256),
            'card_name_kanji' => Str::random(101),
            'card_name_roman' => Str::random(101),
            'card_email' => 'watanabe.update',
            'card_office_name' => Str::random(256),
            'card_qualification' => ['資格1','資格2','資格3','資格4'],
            'is_describe_office_name' => true,
            'note' => 'note abc'
        ]);
        $response->assertStatus(422);

        //statusには、整数を指定してください。
        //delivery prefectureには、255以下の数字を指定してください。
        //card prefectureには、255以下の数字を指定してください。
        //card imageには、画像を指定してください。
        //card background imageには、画像を指定してください。
        //card emailは、255文字以下にしてください。
        $response = $this->put('/api/v1/business-card/1', [
            'status' => 'abc',
            'delivery_postal_code' => '1001001',
            'delivery_prefecture' => 256,
            'delivery_address1' => 'AAA市 update',
            'delivery_address2' => 'BBB市 update',
            'card_name_kanji' => '喜嶋 知実 update',
            'card_name_roman' => 'Tomomi Kijima Update',
            'card_email' => Str::random(256).'@example.net',
            'card_office_name' => '株式会社XXXUpdate',
            'is_describe_office_name' => true,
            'note' => 'note abc',
            'card_image_file' => 'abc',
            'card_background_image_file' => 'abc',
        ]);
        $response->assertStatus(422);
    }

    public function testSupport()
    {
        // 情報更新
        $response = $this->post('/api/v1/business-card/2/support');
        $response->assertStatus(200);
        $this->assertTrue($response['status'] === BusinessCard::STATUS_SUPPORT);
    }

    public function testSupport404()
    {
        // 対象の名刺作成依頼が存在しません。
        $response = $this->post('/api/v1/business-card/999/support');
        $response->assertStatus(404);
    }

    public function testComplete()
    {
        // 情報更新
        $response = $this->post('/api/v1/business-card/2/complete');
        $response->assertStatus(200);
        $this->assertTrue($response['status'] === BusinessCard::STATUS_COMPLETE);
    }

    public function testComplete404()
    {
        // 対象の名刺作成依頼が存在しません。
        $response = $this->post('/api/v1/business-card/999/complete');
        $response->assertStatus(404);
    }

    public function testDownload()
    {
        // 情報更新
        $response = $this->get('/api/v1/business-card/1/download');
        $response->assertStatus(200);
    }

    public function testDownload404()
    {
        // 対象の名刺作成依頼が存在しません。
        $response = $this->get('/api/v1/business-card/999/download');
        $response->assertStatus(404);
    }

    public function testIndex1()
    {
        //検索未指定
        $response = $this->get('/api/v1/business-card');
        $response->assertStatus(200);
    }

    public function testIndex2()
    {
        //検索指定（データ有り）
        $response = $this->get('/api/v1/business-card?name=井村');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) > 0);

        $response = $this->get('/api/v1/business-card?name=山本&from=2022-01-01&to=2025-01-01&status=4&member_number=XXX');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) > 0);
    }

    public function testIndex3()
    {
        //検索指定（データ有り）
        $response = $this->get('/api/v1/business-card?name=abc');
        $response->assertStatus(200);
        $this->assertTrue(count($response['data']) === 0);
    }

    public function testShow()
    {
        //正常系
        $response = $this->get('/api/v1/business-card/1');
        $response->assertStatus(200);
    }

    public function testShowFailure404()
    {
        //名刺作成依頼が存在しません。
        $response = $this->get('/api/v1/business-card/9999');
        $response->assertStatus(404);
    }


}
